Road map:
--> Random walk in latent space with GAN
    Style transfer
    Texture transfer
    ?

Current sprint:
--> Baseline GAN from tutorial (https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html)
    Random walk in latent space
    Higher resolution images

Current task:
    Get training to run
    Track generator output on fixed latents
--> Use metrics/plotting from meta
    Save results
    Tests
    Refactoring

Notes for current sprint/task:
- Ideas for better training:
  - More data
  - Longer training time
  - Hyperparameter tuning
  - Newer GAN techniques


----------------------------------------------------------------------------------------


Mosaic

Architecture:
Canvas (image, max_child_area, num_splits)
    self.num_splits: int
    self.max_child_area: float
    self.num_samples: int
    self.area: Shape
    partition(self) -> None: (affects self.area)
    color(self) -> Image:
Shape (abstract class, not to be instantiated)
    self.children: List[Shape]
    partition(self) -> None: (affects self.children)
    descendants(self) -> List[Shape]: (returns a list of all descendants of self, including self)
    inside_positions(self) -> List[Tuple[int, int]]: (returns a list of all pixel positions inside shape)
    is_inside(self, pos) -> boolean: (returns True if `pos` is inside self, False otherwise)
    bounds(self) -> Tuple[Tuple[int, int], Tuple[int, int]]: (returns coordinates of top left and bottom right of bounding box)
    area(self) -> float: (returns area of shape)
Circle extends Shape (center, radius)
    self.center: Tuple[int, int]
    self.radius: int
    is_inside(self, pos)
    bounds(self)
    area(self)
Triangle extends Shape (center, radius)
    self.v1: Tuple[int, int]
    self.v2: Tuple[int, int]
    self.v3: Tuple[int, int]
    is_inside(self, pos)
    bounds(self)
    area(self)
Square subclass
    self.top_left: Tuple[int, int]
    self.bottom_right: Tuple[int, int]
    is_inside(self, pos)
    bounds(self)
    area(self)
Mosaic runner (image, max_child_area)
    # instantiate canvas with image, max_child_area
    # partition canvas with squares, circles, and triangles
    # produced colored image
    # save canvas, image, and config

Done:
Add mosaic command to main
Shape (everything except partition)
Circle
Triangle
Square
Shape (partition)
Canvas (partition)
Runner
Canvas (color)

In progress:
Improve quality and performance

To do:

Notes for improving performance/quality:
- Write check for overlap between shapes analytically instead of checking each position
- Only use triangles and circles so we don't have to worry about intersection and we can
  always generate maximal children


----------------------------------------------------------------------------------------


temp_mosaic branch:

Making a new branch because I need to quickly tear down a lot of the original mosaic
functionality. Plan is to modify the code so that we are only partitioning the image
into triangles. This way all of the computations involved will be much, much faster,
allowing for mosaic generation on high resolution images in no time.

Thoughts from tests:
- For number of splits, try 1500
- For uniformity, try 0.3, 0.4


----------------------------------------------------------------------------------------

Future plans:

Refactoring:
- Make number of generator/discriminator layers options
- Initialization options
- Optimizer options


----------------------------------------------------------------------------------------


Reading:

- Read through GAN papers
  - Generative Adversarial Networks (Goodfellow)
  - Unsupervised Representation Learning with Deep Convolutional Generative Adversarial
    Networks (Radford)
  - BigGAN?
  - BigBiGAN?
  - Look for more recent GAN stuff
  - Look into GAN literature about this point: Why, when training the generator, do we
    only compute the loss using fake images? Would it not be better to train the
    generator so that the discriminator classifies fake images as real as well as real
    images as fake?
- Read through VAE literature (especially the recent NVAE)
- Read distill.pub articles about image generation


----------------------------------------------------------------------------------------


Misc:

Flowers dataset came from: https://www.kaggle.com/alxmamaev/flowers-recognition
